// Code generated by "enumer -type=Type -transform=lower -output=type_string.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"strings"
)

const _TypeName = "rawimawsflexibleengineopenstackgoogleazurerm"

var _TypeIndex = [...]uint8{0, 3, 5, 8, 22, 31, 37, 44}

const _TypeLowerName = "rawimawsflexibleengineopenstackgoogleazurerm"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[Raw-(0)]
	_ = x[IM-(1)]
	_ = x[AWS-(2)]
	_ = x[FlexibleEngine-(3)]
	_ = x[OpenStack-(4)]
	_ = x[Google-(5)]
	_ = x[Azurerm-(6)]
}

var _TypeValues = []Type{Raw, IM, AWS, FlexibleEngine, OpenStack, Google, Azurerm}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:3]:        Raw,
	_TypeLowerName[0:3]:   Raw,
	_TypeName[3:5]:        IM,
	_TypeLowerName[3:5]:   IM,
	_TypeName[5:8]:        AWS,
	_TypeLowerName[5:8]:   AWS,
	_TypeName[8:22]:       FlexibleEngine,
	_TypeLowerName[8:22]:  FlexibleEngine,
	_TypeName[22:31]:      OpenStack,
	_TypeLowerName[22:31]: OpenStack,
	_TypeName[31:37]:      Google,
	_TypeLowerName[31:37]: Google,
	_TypeName[37:44]:      Azurerm,
	_TypeLowerName[37:44]: Azurerm,
}

var _TypeNames = []string{
	_TypeName[0:3],
	_TypeName[3:5],
	_TypeName[5:8],
	_TypeName[8:22],
	_TypeName[22:31],
	_TypeName[31:37],
	_TypeName[37:44],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}
	s = strings.ToLower(s)
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}
